// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChartRequest {
    #[prost(enumeration = "Timeframe", tag = "1")]
    pub timeframe: i32,
    #[prost(enumeration = "Category", optional, tag = "2")]
    pub category: ::core::option::Option<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChartResponse {
    #[prost(enumeration = "Timeframe", tag = "1")]
    pub timeframe: i32,
    #[prost(message, repeated, tag = "2")]
    pub ordered_chart_data: ::prost::alloc::vec::Vec<ChartData>,
    #[prost(enumeration = "Category", optional, tag = "3")]
    pub category: ::core::option::Option<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChartData {
    #[prost(float, tag = "1")]
    pub raw_rating: f32,
    #[prost(message, optional, tag = "2")]
    pub rating: ::core::option::Option<super::common::Rating>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Timeframe {
    Unspecified = 0,
    Week = 1,
    Month = 2,
}
impl Timeframe {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Timeframe::Unspecified => "TIMEFRAME_UNSPECIFIED",
            Timeframe::Week => "TIMEFRAME_WEEK",
            Timeframe::Month => "TIMEFRAME_MONTH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TIMEFRAME_UNSPECIFIED" => Some(Self::Unspecified),
            "TIMEFRAME_WEEK" => Some(Self::Week),
            "TIMEFRAME_MONTH" => Some(Self::Month),
            _ => None,
        }
    }
}
/// The categories that can be selected, these
/// are taken directly from  `curl -sS -X GET --unix-socket /run/snapd.socket "<http://localhost/v2/categories"`>
/// On 2024-02-03, it may need to be kept in sync.
#[derive(sqlx::Type, strum::EnumString)]
#[strum(serialize_all = "kebab_case", ascii_case_insensitive)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Category {
    ArtAndDesign = 0,
    BookAndReference = 1,
    Development = 2,
    DevicesAndIot = 3,
    Education = 4,
    Entertainment = 5,
    Featured = 6,
    Finance = 7,
    Games = 8,
    HealthAndFitness = 9,
    MusicAndAudio = 10,
    NewsAndWeather = 11,
    Personalisation = 12,
    PhotoAndVideo = 13,
    Productivity = 14,
    Science = 15,
    Security = 16,
    ServerAndCloud = 17,
    Social = 18,
    Utilities = 19,
}
impl Category {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Category::ArtAndDesign => "ART_AND_DESIGN",
            Category::BookAndReference => "BOOK_AND_REFERENCE",
            Category::Development => "DEVELOPMENT",
            Category::DevicesAndIot => "DEVICES_AND_IOT",
            Category::Education => "EDUCATION",
            Category::Entertainment => "ENTERTAINMENT",
            Category::Featured => "FEATURED",
            Category::Finance => "FINANCE",
            Category::Games => "GAMES",
            Category::HealthAndFitness => "HEALTH_AND_FITNESS",
            Category::MusicAndAudio => "MUSIC_AND_AUDIO",
            Category::NewsAndWeather => "NEWS_AND_WEATHER",
            Category::Personalisation => "PERSONALISATION",
            Category::PhotoAndVideo => "PHOTO_AND_VIDEO",
            Category::Productivity => "PRODUCTIVITY",
            Category::Science => "SCIENCE",
            Category::Security => "SECURITY",
            Category::ServerAndCloud => "SERVER_AND_CLOUD",
            Category::Social => "SOCIAL",
            Category::Utilities => "UTILITIES",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ART_AND_DESIGN" => Some(Self::ArtAndDesign),
            "BOOK_AND_REFERENCE" => Some(Self::BookAndReference),
            "DEVELOPMENT" => Some(Self::Development),
            "DEVICES_AND_IOT" => Some(Self::DevicesAndIot),
            "EDUCATION" => Some(Self::Education),
            "ENTERTAINMENT" => Some(Self::Entertainment),
            "FEATURED" => Some(Self::Featured),
            "FINANCE" => Some(Self::Finance),
            "GAMES" => Some(Self::Games),
            "HEALTH_AND_FITNESS" => Some(Self::HealthAndFitness),
            "MUSIC_AND_AUDIO" => Some(Self::MusicAndAudio),
            "NEWS_AND_WEATHER" => Some(Self::NewsAndWeather),
            "PERSONALISATION" => Some(Self::Personalisation),
            "PHOTO_AND_VIDEO" => Some(Self::PhotoAndVideo),
            "PRODUCTIVITY" => Some(Self::Productivity),
            "SCIENCE" => Some(Self::Science),
            "SECURITY" => Some(Self::Security),
            "SERVER_AND_CLOUD" => Some(Self::ServerAndCloud),
            "SOCIAL" => Some(Self::Social),
            "UTILITIES" => Some(Self::Utilities),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod chart_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct ChartClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ChartClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ChartClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ChartClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            ChartClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn get_chart(
            &mut self,
            request: impl tonic::IntoRequest<super::GetChartRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetChartResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/ratings.features.chart.Chart/GetChart",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("ratings.features.chart.Chart", "GetChart"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod chart_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ChartServer.
    #[async_trait]
    pub trait Chart: Send + Sync + 'static {
        async fn get_chart(
            &self,
            request: tonic::Request<super::GetChartRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetChartResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct ChartServer<T: Chart> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: Chart> ChartServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ChartServer<T>
    where
        T: Chart,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/ratings.features.chart.Chart/GetChart" => {
                    #[allow(non_camel_case_types)]
                    struct GetChartSvc<T: Chart>(pub Arc<T>);
                    impl<T: Chart> tonic::server::UnaryService<super::GetChartRequest>
                    for GetChartSvc<T> {
                        type Response = super::GetChartResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetChartRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Chart>::get_chart(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetChartSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: Chart> Clone for ChartServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: Chart> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: Chart> tonic::server::NamedService for ChartServer<T> {
        const NAME: &'static str = "ratings.features.chart.Chart";
    }
}
