// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Rating {
    #[prost(string, tag = "1")]
    pub snap_id: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub total_votes: u64,
    #[prost(enumeration = "RatingsBand", tag = "3")]
    pub ratings_band: i32,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RatingsBand {
    VeryGood = 0,
    Good = 1,
    Neutral = 2,
    Poor = 3,
    VeryPoor = 4,
    InsufficientVotes = 5,
}
impl RatingsBand {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            RatingsBand::VeryGood => "VERY_GOOD",
            RatingsBand::Good => "GOOD",
            RatingsBand::Neutral => "NEUTRAL",
            RatingsBand::Poor => "POOR",
            RatingsBand::VeryPoor => "VERY_POOR",
            RatingsBand::InsufficientVotes => "INSUFFICIENT_VOTES",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "VERY_GOOD" => Some(Self::VeryGood),
            "GOOD" => Some(Self::Good),
            "NEUTRAL" => Some(Self::Neutral),
            "POOR" => Some(Self::Poor),
            "VERY_POOR" => Some(Self::VeryPoor),
            "INSUFFICIENT_VOTES" => Some(Self::InsufficientVotes),
            _ => None,
        }
    }
}
